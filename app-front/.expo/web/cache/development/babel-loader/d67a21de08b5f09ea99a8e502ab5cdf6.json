{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject,\n    _templateObject2,\n    _this = this,\n    _jsxFileName = \"/Users/dahyun/My_Keyword_Notification/app-front/src/screens/Login.js\";\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components/native';\nimport { Image, Input, Button } from \"../components\";\nimport { validateEmail, removeWhitespace } from \"../utils/common\";\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nvar Container = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  flex: 1;\\n  justify-content: center;\\n  align-items: center;\\n  background-color: \", \";\\n  padding: 0 20px;\\n\"])), function (_ref) {\n  var theme = _ref.theme;\n  return theme.background;\n});\nvar ErrorText = styled.Text(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  align-items: flex-start;\\n  width: 100%;\\n  height: 20px;\\n  margin-bottom: 10px;\\n  line-height: 20px;\\n  color: \", \";\\n\"])), function (_ref2) {\n  var theme = _ref2.theme;\n  return theme.errorText;\n});\n\nvar Login = function Login(_ref3) {\n  var navigation = _ref3.navigation;\n  var insets = useSafeAreaInsets();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      id = _useState2[0],\n      setId = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var passwordRef = useRef();\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      errorMessage = _useState6[0],\n      setErrorMessage = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      disabled = _useState8[0],\n      setDisabled = _useState8[1];\n\n  useEffect(function () {\n    setDisabled(!(id && password && !errorMessage));\n  }, [id, password, errorMessage]);\n\n  var _handleIdChange = function _handleIdChange(id) {\n    setId(removeWhitespace(id));\n  };\n\n  var _handlePasswordChange = function _handlePasswordChange(password) {\n    setPassword(removeWhitespace(password));\n  };\n\n  var _handleLoginButtonPress = function _handleLoginButtonPress() {};\n\n  return React.createElement(Container, {\n    insets: insets,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), React.createElement(Input, {\n    label: \"ID\",\n    value: id,\n    onChangeText: _handleIdChange,\n    onSubmitEditing: function onSubmitEditing() {\n      return _handleLoginButtonPress;\n    },\n    placeholder: \"ID\",\n    returnKeyType: \"next\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), React.createElement(Input, {\n    ref: passwordRef,\n    label: \"Password\",\n    value: password,\n    onChangeText: _handlePasswordChange,\n    onSubmitEditing: function onSubmitEditing() {},\n    placeholder: \"Password\",\n    returnKeyType: \"done\",\n    isPassword: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), React.createElement(ErrorText, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, errorMessage), React.createElement(Button, {\n    title: \"Login\",\n    onPress: _handleLoginButtonPress,\n    disabled: disabled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    title: \"Sign up with email\",\n    onPress: function onPress() {\n      return navigation.navigate('Signup');\n    },\n    isFilled: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/dahyun/My_Keyword_Notification/app-front/src/screens/Login.js"],"names":["React","useState","useRef","useEffect","styled","Image","Input","Button","validateEmail","removeWhitespace","useSafeAreaInsets","Container","View","theme","background","ErrorText","Text","errorText","Login","navigation","insets","id","setId","password","setPassword","passwordRef","errorMessage","setErrorMessage","disabled","setDisabled","_handleIdChange","_handlePasswordChange","_handleLoginButtonPress","navigate"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components/native';\nimport { Image, Input, Button } from '../components'; \n//import { images } from './utils/images' //백엔드에서 이미지 불러오기\n//import {TouchableWithoutFeedback, Keyboard} from 'react-native'; //키보드 감추는 기능\n//import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'; //키보드 스크롤 기능\nimport { validateEmail, removeWhitespace} from '../utils/common'\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'; //화면짤림문제해결, 노치 디자인 대응, padding값 얻기,useSafeAreaInsets Hook\n\nconst Container = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  background-color: ${({ theme }) => theme.background};\n  padding: 0 20px;\n`;\nconst ErrorText = styled.Text`\n  align-items: flex-start;\n  width: 100%;\n  height: 20px;\n  margin-bottom: 10px;\n  line-height: 20px;\n  color: ${({ theme }) => theme.errorText};\n`;\n\nconst Login = ({ navigation }) => {\n  const insets = useSafeAreaInsets();\n  \n  const [id, setId] = useState('');\n  const [password, setPassword] = useState('');\n  const passwordRef = useRef(); //키보드 next(tab)로 아이디 입력창에서 비밀번호 입력창으로 이동 가능\n  const [errorMessage, setErrorMessage] = useState('');\n  const [disabled, setDisabled] = useState(true);\n\n  useEffect(() => {\n    setDisabled(!(id && password && !errorMessage));\n  }, [id, password, errorMessage]);\n\n  const _handleIdChange = id => {\n    setId(removeWhitespace(id));\n  };\n  const _handlePasswordChange = password => {\n    setPassword(removeWhitespace(password));\n  };\n  const _handleLoginButtonPress = () => {};\n\n  return (\n    <Container insets={insets}>\n      <Image />\n        <Input\n          label=\"ID\"\n          value={id}\n          onChangeText={_handleIdChange} \n          onSubmitEditing={() => (_handleLoginButtonPress)}\n          placeholder=\"ID\"\n          returnKeyType=\"next\"\n        />\n        <Input\n          ref={passwordRef}\n          label=\"Password\"\n          value={password}\n          onChangeText={_handlePasswordChange}\n          onSubmitEditing={()=>{}}\n          placeholder=\"Password\"\n          returnKeyType=\"done\"\n          isPassword\n        />\n        <ErrorText>{errorMessage}</ErrorText>\n        <Button\n          title=\"Login\"\n          onPress={_handleLoginButtonPress}\n          disabled={disabled}\n        />\n        <Button\n          title=\"Sign up with email\"\n          onPress={() => navigation.navigate('Signup')}\n          isFilled={false}\n        />\n    </Container>\n  );\n};\n\nexport default Login;\n\n/*\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components/native';\nimport { Alert, Button } from 'react-native';\nimport { Image, Input } from '../components'; \n//import { images } from './utils/images' //백엔드에서 이미지 불러오기\n//import {TouchableWithoutFeedback, Keyboard} from 'react-native'; //키보드 감추는 기능\n//import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'; //키보드 스크롤 기능\nimport { validateEmail, removeWhitespace} from '../utils/common'\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'; //화면짤림문제해결, 노치 디자인 대응, padding값 얻기,useSafeAreaInsets Hook\nimport { ProgressContext, UserContext } from '../contexts'; \nimport { useContext } from 'react';\n\nconst Container = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  background-color: ${({ theme }) => theme.background};\n  padding: 0 20px;\n  padding-top: ${({ insets: { top } }) => top}px;\n  padding-bottom: ${({ insets: { bottom } }) => bottom}px;\n`;\nconst ErrorText = styled.Text`\n  align-items: flex-start;\n  width: 100%;\n  height: 20px;\n  margin-bottom: 10px;\n  line-height: 20px;\n  color: ${({ theme }) => theme.errorText};\n`;\n\nconst Login = ({ navigation }) => {\n  const { spinner } = useContext(ProgressContext);\n  const { dispatch } = useContext(UserContext);\n\n  const [id, setId] = useState('');\n  const [password, setPassword] = useState('');\n  const passwordRef = useRef(); //키보드 next(tab)로 아이디 입력창에서 비밀번호 입력창으로 이동 가능\n  const [errorMessage, setErrorMessage] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const insets = useSafeAreaInsets();\n\n  useEffect(() => {\n    setDisabled(!(id && password && !errorMessage));\n  }, [id, password, errorMessage]);\n\n  const _handleIdChange = id => {\n    setId(removeWhitespace(id));\n  };\n  const _handlePasswordChange = password => {\n    setPassword(removeWhitespace(password));\n  };\n  const _handleLoginButtonPress = async () => {\n    try {\n      spinner.start();\n      const user = await Login({id, password});\n      dispatch(user);\n    } catch (e) {\n      Alert.alert('Login Error', e.message);\n    } finally {\n      spinner.stop();\n    }\n  };\n\n  return (\n    <Container insets={insets}>\n      <Image />\n        <Input\n          label=\"ID\"\n          value={id}\n          onChangeText={_handleIdChange} \n          onSubmitEditing={() => (_handleLoginButtonPress)}\n          placeholder=\"ID\"\n          returnKeyType=\"next\"\n        />\n        <Input\n          ref={passwordRef}\n          label=\"Password\"\n          value={password}\n          onChangeText={_handlePasswordChange}\n          onSubmitEditing={()=>{}}\n          placeholder=\"Password\"\n          returnKeyType=\"done\"\n          isPassword\n        />\n        <ErrorText>{errorMessage}</ErrorText>\n        <Button\n          title=\"Login\"\n          onPress={_handleLoginButtonPress}\n          disabled={disabled}\n        />\n        <Button\n          title=\"Sign up with email\"\n          onPress={() => navigation.navigate('Signup')}\n          isFilled={false}\n        />\n    </Container>\n  );\n};\n\nexport default Login;\n*/"]},"metadata":{},"sourceType":"module"}