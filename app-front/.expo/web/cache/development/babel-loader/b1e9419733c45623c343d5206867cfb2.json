{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject,\n    _templateObject2,\n    _this = this,\n    _jsxFileName = \"/Users/dahyun/My_Keyword_Notification/app-front/app/screens/Login/SignupScreen.js\";\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components/native';\nimport { Input, Button } from \"../../components\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { validateEmail, removeWhitespace } from \"../../utils/common\";\nvar Container = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  flex: 1;\\n  justify-content: center;\\n  align-items: center;\\n  background-color: #ffffff;\\n  padding: 0 20px;\\n\"])));\nvar ErrorText = styled.Text(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  align-items: flex-start;\\n  width: 100%;\\n  height: 20px;\\n  margin-bottom: 10px;\\n  line-height: 20px;\\n  color: #ff0000;\\n\"])));\n\nvar SignupScreen = function SignupScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      id = _useState2[0],\n      setId = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      password = _useState6[0],\n      setPassword = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      passwordConfirm = _useState8[0],\n      setPasswordConfirm = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      errorMessage = _useState10[0],\n      setErrorMessage = _useState10[1];\n\n  var _useState11 = useState(true),\n      _useState12 = _slicedToArray(_useState11, 2),\n      disabled = _useState12[0],\n      setDisabled = _useState12[1];\n\n  var emailRef = useRef();\n  var passwordRef = useRef();\n  var passwordConfirmRef = useRef();\n  var didMountRef = useRef();\n  useEffect(function () {\n    if (didMountRef.current) {\n      var _errorMessage = '';\n\n      if (!id) {\n        _errorMessage = 'Please enter your ID.';\n      } else if (!validateEmail(email)) {\n        _errorMessage = 'Please verify your email.';\n      } else if (password.length < 6) {\n        _errorMessage = 'The password must contain 6 characters at least.';\n      } else if (password !== passwordConfirm) {\n        _errorMessage = 'Passwords need to match.';\n      } else {\n        _errorMessage = '';\n      }\n\n      setErrorMessage(_errorMessage);\n    } else {\n      didMountRef.current = true;\n    }\n  }, [id, email, password, passwordConfirm]);\n  useEffect(function () {\n    setDisabled(!(id && email && password && passwordConfirm && !errorMessage));\n  }, [id, email, password, passwordConfirm, errorMessage]);\n\n  var _handleSignupButtonPress = function _handleSignupButtonPress() {\n    fetch('http://13.125.132.137:3000/register', {\n      method: \"POST\",\n      headers: {\n        'CONTENT-TYPE': 'application/json'\n      },\n      body: JSON.stringify({\n        id: id,\n        email: email,\n        psword: password\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      if (data.success === true) {\n        Alert.alert(\"정상적으로 회원가입 되었습니다.\");\n\n        (function () {\n          return navigation.navigate(\"LoginScreen\");\n        });\n      } else {\n        Alert.alert(\"입력한 정보를 확인해주세요.\");\n      }\n    });\n  };\n\n  return React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, React.createElement(Input, {\n    label: \"ID\",\n    value: id,\n    onChangeText: function onChangeText(text) {\n      return setId(text);\n    },\n    onSubmitEditing: function onSubmitEditing() {\n      setId(id.trim());\n      emailRef.current.focus();\n    },\n    onBlur: function onBlur() {\n      return setId(id.trim());\n    },\n    placeholder: \"ID\",\n    returnKeyType: \"next\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), React.createElement(Input, {\n    ref: emailRef,\n    label: \"Email\",\n    value: email,\n    onChangeText: function onChangeText(text) {\n      return setEmail(removeWhitespace(text));\n    },\n    onSubmitEditing: function onSubmitEditing() {\n      return passwordRef.current.focus();\n    },\n    placeholder: \"Email\",\n    returnKeyType: \"next\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }), React.createElement(Input, {\n    ref: passwordRef,\n    label: \"Password\",\n    value: password,\n    onChangeText: function onChangeText(text) {\n      return setPassword(removeWhitespace(text));\n    },\n    onSubmitEditing: function onSubmitEditing() {\n      return passwordConfirmRef.current.focus();\n    },\n    placeholder: \"Password\",\n    returnKeyType: \"done\",\n    isPassword: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }), React.createElement(Input, {\n    ref: passwordConfirmRef,\n    label: \"Password Confirm\",\n    value: passwordConfirm,\n    onChangeText: function onChangeText(text) {\n      return setPasswordConfirm(removeWhitespace(text));\n    },\n    onSubmitEditing: _handleSignupButtonPress,\n    placeholder: \"Password\",\n    returnKeyType: \"done\",\n    isPassword: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }), React.createElement(ErrorText, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, errorMessage), React.createElement(Button, {\n    title: \"Signup\",\n    onPress: _handleSignupButtonPress,\n    disabled: disabled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    title: \"login\",\n    onPress: function onPress() {\n      return navigation.navigate(\"LoginScreen\");\n    },\n    underlayColor: \"transparent\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }));\n};\n\nexport default SignupScreen;","map":{"version":3,"sources":["/Users/dahyun/My_Keyword_Notification/app-front/app/screens/Login/SignupScreen.js"],"names":["React","useState","useRef","useEffect","styled","Input","Button","validateEmail","removeWhitespace","Container","View","ErrorText","Text","SignupScreen","navigation","id","setId","email","setEmail","password","setPassword","passwordConfirm","setPasswordConfirm","errorMessage","setErrorMessage","disabled","setDisabled","emailRef","passwordRef","passwordConfirmRef","didMountRef","current","_errorMessage","length","_handleSignupButtonPress","fetch","method","headers","body","JSON","stringify","psword","then","response","json","data","success","Alert","alert","navigate","text","trim","focus"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect} from 'react';\nimport styled from 'styled-components/native';\nimport { Input, Button } from '../../components';\nimport { Alert, Text, View, TouchableHighlight } from \"react-native\";\n//import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { validateEmail, removeWhitespace } from '../../utils/common';\n\n\nconst Container = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  background-color: #ffffff;\n  padding: 0 20px;\n`;\n\nconst ErrorText = styled.Text`\n  align-items: flex-start;\n  width: 100%;\n  height: 20px;\n  margin-bottom: 10px;\n  line-height: 20px;\n  color: #ff0000;\n`;\n\nconst SignupScreen= ({ navigation }) => {\n  const [id, setId] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordConfirm, setPasswordConfirm] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [disabled, setDisabled] = useState(true);\n\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmRef = useRef();\n\n  const didMountRef = useRef(); //useEffect 오류 메시지 처음 화면에서 나타나는 오류 해결, 마운트 되었을 때 useEffect에서 didMountRef에 값 대입하기\n\n  useEffect(() => {\n    if (didMountRef.current) {\n      let _errorMessage = '';\n      if (!id) {\n        _errorMessage = 'Please enter your ID.';\n      } else if (!validateEmail(email)) {\n        _errorMessage = 'Please verify your email.';\n      } else if (password.length < 6) {\n        _errorMessage = 'The password must contain 6 characters at least.';\n      } else if (password !== passwordConfirm) {\n        _errorMessage = 'Passwords need to match.';\n      } else {\n        _errorMessage = '';\n      }\n      setErrorMessage(_errorMessage);\n    } else {\n      didMountRef.current = true;\n    }\n  }, [id, email, password, passwordConfirm]);\n\n  useEffect(() => {\n    setDisabled(\n      !(id && email && password && passwordConfirm && !errorMessage)\n    );\n  }, [id, email, password, passwordConfirm, errorMessage]);\n\n  const _handleSignupButtonPress = () => {\n    fetch('http://13.125.132.137:3000/register', {\n      method: \"POST\",\n      headers: {\n        'CONTENT-TYPE': 'application/json',\n      },\n      body: JSON.stringify({\n        id: id,\n        email: email,\n        psword: password,\n        }),\n      })\n    .then(response=>{\n      return response.json();\n    }).then(data=>{\n      if (data.success === true){\n        Alert.alert(\"정상적으로 회원가입 되었습니다.\");\n        () => navigation.navigate(\"LoginScreen\");\n      }\n      else{\n        Alert.alert(\"입력한 정보를 확인해주세요.\");\n      }\n    })\n  };\n\n  return (\n    <Container>\n        <Input\n          label=\"ID\"\n          value={id}\n          onChangeText={text => setId(text)}\n          onSubmitEditing={() => {\n            setId(id.trim());\n            emailRef.current.focus();\n          }}\n          onBlur={() => setId(id.trim())}\n          placeholder=\"ID\"\n          returnKeyType=\"next\"\n        />\n        <Input\n          ref={emailRef}\n          label=\"Email\"\n          value={email}\n          onChangeText={text => setEmail(removeWhitespace(text))}\n          onSubmitEditing={() => passwordRef.current.focus()}\n          placeholder=\"Email\"\n          returnKeyType=\"next\"\n        />\n        <Input\n          ref={passwordRef}\n          label=\"Password\"\n          value={password}\n          onChangeText={text => setPassword(removeWhitespace(text))}\n          onSubmitEditing={() => passwordConfirmRef.current.focus()}\n          placeholder=\"Password\"\n          returnKeyType=\"done\"\n          isPassword\n        />\n        <Input\n          ref={passwordConfirmRef}\n          label=\"Password Confirm\"\n          value={passwordConfirm}\n          onChangeText={text => setPasswordConfirm(removeWhitespace(text))}\n          onSubmitEditing={_handleSignupButtonPress}\n          placeholder=\"Password\"\n          returnKeyType=\"done\"\n          isPassword\n        />\n        <ErrorText>{errorMessage}</ErrorText>\n        <Button\n          title=\"Signup\"\n          onPress={_handleSignupButtonPress}\n          disabled={disabled}\n        />\n          <Button\n            title = \"login\"\n            onPress={() => navigation.navigate(\"LoginScreen\")}\n            underlayColor={\"transparent\"}\n         />\n\n      </Container>\n  );\n};\n\nexport default SignupScreen;\n"]},"metadata":{},"sourceType":"module"}