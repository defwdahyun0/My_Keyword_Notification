{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/dahyun/My_Keyword_Notification/app-front/src/App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Navigation from \"./navigations\";\n\nvar _default = function (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    var _this;\n\n    _classCallCheck(this, _default);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isLoading: true\n    };\n\n    _this.componentDidMount = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setTimeout(function () {\n                _this.setState({\n                  isLoading: false\n                });\n              }, 3000);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Navigation, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 14\n        }\n      });\n    }\n  }]);\n\n  return _default;\n}(React.Component);\n\nexport { _default as default };","map":{"version":3,"sources":["/Users/dahyun/My_Keyword_Notification/app-front/src/App.js"],"names":["React","Navigation","state","isLoading","componentDidMount","setTimeout","setState","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP;;;;;;;;;;;;;;;;;UAGEC,K,GAAQ;AACNC,MAAAA,SAAS,EAAE;AADL,K;;UAGRC,iB,GAAoB;AAAA;AAAA;AAAA;AAAA;AAClBC,cAAAA,UAAU,CAAC,YAAM;AACf,sBAAKC,QAAL,CAAc;AAAEH,kBAAAA,SAAS,EAAE;AAAb,iBAAd;AACD,eAFS,EAEP,IAFO,CAAV;;AADkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;WAMpB,kBAAS;AAKL,aAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAEH;;;;EAjB0BH,KAAK,CAACO,S","sourcesContent":["import React from 'react';\nimport Navigation from './navigations';\n\nexport default class extends React.Component {\n  state = {\n    isLoading: true,\n  };\n  componentDidMount = async () => {\n    setTimeout(() => {\n      this.setState({ isLoading: false }); //Loading으로 넘어가서 작업하려면 true로 바꾸면 됨\n    }, 3000); //3초후에 Login화면으로 전환됨\n  };\n\n  render() {\n    /*\n    if (this.state.isLoading) {\n      //return <Loading />;\n    } else { */\n      return <Navigation />;\n    // }\n  }\n}\n\n/*\n\n//이미지 불러오는 과정에서 오류가 나는 것 같음\nimport React, { useState } from 'react';\nimport { StatusBar, Image } from 'react-native';\nimport { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport { ThemeProvider } from 'styled-components/native';\nimport { theme } from './theme';\n//import Navigation from './navigations';\n\nconst cacheImages = images => {\n  return images.map(image => {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n};\n\nconst cacheFonts = fonts => {\n  return fonts.map(font => Font.loadAsync(font));\n};\nconst App = () => {\n  const [isReady, setIsReady] = useState(false);\n\n  const _loadAssets = async () => {\n    const imageAssets = cacheImages([require('../assets/splash.png')]);\n    const fontAssets = cacheFonts([]);\n\n    await Promise.all([...imageAssets, ...fontAssets]);\n  };\n\n  return isReady ? (\n    <ThemeProvider theme={theme}>\n      <StatusBar barStyle=\"dark-content\" />\n    </ThemeProvider>\n  ) : (\n    <AppLoading\n      startAsync={_loadAssets}\n      onFinish={() => setIsReady(true)}\n      onError={console.warn}\n    />\n  );\n};\n\nexport default App;\n\n*/"]},"metadata":{},"sourceType":"module"}